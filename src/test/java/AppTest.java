/*
 * This Java source file was generated by the Gradle 'init' task.
 */

import org.junit.Test;

import static org.junit.Assert.*;

import leetcode.*;
import leetcode.Utils.TreeNode;

public class AppTest {
    @Test
    public void testLongestCommonPrefix() {
        assertEquals("wh", LongestCommonPrefix.run(new String[]{"whose", "what", "wh"}));
        assertEquals("lo", LongestCommonPrefix.run(new String[]{"loo", "loa", "lob"}));
        assertEquals("", LongestCommonPrefix.run(new String[]{"a", "", "b"}));
    }

    @Test
    public void testNumberComplement() {
        assertEquals(2, NumberComplement.run(5));
        assertEquals(0, NumberComplement.run(1));
        assertEquals(15, NumberComplement.run(16));
    }

    @Test
    public void testRelativeRank() {
        String[] expVal = new String[]{"Gold Medal", "5", "Bronze Medal", "Silver Medal", "4"};
        assertArrayEquals(expVal, RelativeRank.run(new int[]{10, 3, 8, 9, 4}));
    }

    @Test
    public void testFirstUniqueCharacter() {
        assertEquals(2, FirstUniqueCharacter.run("loveleetcode"));
        assertEquals(-1, FirstUniqueCharacter.run("lool"));
    }

    @Test
    public void testSumNestedArray() {
        assertEquals(0, SumNestedArray.run(new Object[]{}));
        assertEquals(28, SumNestedArray.run(new Object[]{new Object[]{1, new Integer[]{2, 3}}, new Integer[]{4, 5}, 6, 7}));
    }

    @Test
    public void testPossibleBinary() {
        assertArrayEquals(new String[]{}, PossibleBinary.run(0));
        assertArrayEquals(new String[]{"10", "00", "11", "01"}, PossibleBinary.run(2));
        assertArrayEquals(new String[]{"110", "010", "100", "000", "111", "011", "101", "001"}, PossibleBinary.run(3));
    }

    @Test
    public void testMergeTrees() {
        TreeNode node1 = Utils.arrayTotree(new int[]{1,2,3,4,5,6,7});
        TreeNode node2 = Utils.arrayTotree(new int[]{1,2,3,4,5,6,7});
        TreeNode node3 = MergeTrees.run(node1, node2);
        assertArrayEquals(new int[]{2,4,6,8,10,12,14}, Utils.treeToArray(node3));
    }

    @Test
    public void testStackToQueue() {
        StackToQueue queue = new StackToQueue();
        assertEquals(true, queue.empty());
        queue.push(1);
        assertEquals(false, queue.empty());
        assertEquals(1, queue.peek());
        queue.push(2);
        queue.push(3);
        assertEquals(1, queue.peek());
        assertEquals(1, queue.pop());
        assertEquals(2, queue.pop());
        assertEquals(3, queue.pop());
    }

    @Test
    public void testQueueToStack() {
        QueueToStack stack = new QueueToStack();
        assertEquals(true, stack.empty());
        stack.push(1);
        assertEquals(false, stack.empty());
        assertEquals(1, stack.top());
        stack.push(2);
        stack.push(3);
        assertEquals(3, stack.top());
        assertEquals(3, stack.pop());
        assertEquals(2, stack.pop());
        assertEquals(1, stack.pop());
    }
}
